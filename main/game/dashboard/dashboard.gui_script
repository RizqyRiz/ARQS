local button = require "in.button"

local GAME_CONTROLLER = require("main.module.game_controller")
local USER = GAME_CONTROLLER.userData[GAME_CONTROLLER.currentUID]
local FULLNAME = USER.fname .. " " .. USER.lname

function set_text(node_name, text)
	-- Get the GUI node
	local node = gui.get_node(node_name)
	if node then
		-- Set the text value
		gui.set_text(node, text)
	else
		print("Node '" .. node_name .. "' not found.")
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	set_text("user_name", FULLNAME .. ".")

	self.card_node = gui.get_node("card/card")
	self.gid = ""

	for i, v in pairs(GAME_CONTROLLER.publishedGames) do
		local gid = i
		local title = v.title
		local author = v.fname .. " " .. v.lname
		
		self.gid = gid
		set_text("card/title", title)
		set_text("card/author", author)
	end

	-- register gui buttons
	button.register(gui.get_node("card/card"), function()
		gui.play_flipbook(self.card_node, "card_pressed")
		GAME_CONTROLLER.setGameId(self.gid)
		http.request(GAME_CONTROLLER.address .. "api/arqs/game/" .. self.gid, "GET", function(self, id, response) 
			if response.status == 200 or response.status == 304 then
				local data = response.response
				local game = json.decode(data)

				for i, v in ipairs(game) do
					GAME_CONTROLLER.setCurrentGame(v.GID, v.Name, v.Lesson, v.Learningoutcomes, v.Player)
				end 
			end
		end)
		timer.delay(0.2, false, function()
			msg.post("loader:/game_loader#loader", "load_game_from_dashboard")
		end)
	end)
end


function on_input(self, action_id, action)
	button.on_input(action_id, action)
-- 	if action_id == hash("touch") and action.pressed and gui.pick_node(gui.get_node("card/card"), action.x, action.y) then
-- 		gui.play_flipbook(self.card_node, "card_pressed")
-- 		GAME_CONTROLLER.setGameId(self.gid)
-- 		http.request(GAME_CONTROLLER.address .. "api/arqs/game/" .. self.gid, "GET", function(self, id, response) 
-- 			if response.status == 200 or response.status == 304 then
-- 				local data = response.response
-- 				local game = json.decode(data)
-- 
-- 				for i, v in ipairs(game) do
-- 					GAME_CONTROLLER.setCurrentGame(v.GID, v.Name, v.Lesson, v.Learningoutcomes, v.Player)
-- 				end 
-- 			end
-- 		end)
-- 	end
end