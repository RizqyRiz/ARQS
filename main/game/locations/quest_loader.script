local GAME_CONTROLLER = require("main.module.game_controller")
local AREA_CONTROLLER = require("main.module.area_controller")
local QUEST_CONTROLLER = require("main.module.quest_controller")
local ADDR = GAME_CONTROLLER.address

local world_border_offset = 1
local indoor_offset = 1

local function set_npc(qid, go)
	http.request(ADDR .. "api/arqs/game/character/" .. go.gameobject, "GET", function(self, id, response)
		if response.status == 200 or response.status == 304 then
			local data = response.response
			local npc_data = json.decode(data)

			for i, v in ipairs(npc_data) do
				local npc_visuals = json.decode(v.Visuals)
				--pprint(npc_visuals)
				local gender = npc_visuals.gender
				local age = npc_visuals.age
				local prototype = ""
				if gender == "male" then
					if age == "adult" then
						prototype = "/main/game/quest/prototypes/NPC/male_adult_prototype.goc"
					else
						prototype = "/main/game/quest/prototypes/NPC/male_kid_prototype.goc"
					end
				else
					if age == "adult" then
						prototype = "/main/game/quest/prototypes/NPC/female_adult_prototype.goc"
					else
						prototype = "/main/game/quest/prototypes/NPC/female_kid_prototype.goc"
					end
				end
				QUEST_CONTROLLER.addNPC(qid, v.NPCID, v.Name:gsub("%%20", " "), v.Background:gsub("%%20", " "), gender, age, prototype, npc_visuals)
			end
		end
	end)
end

local function set_items(qid, go)
	http.request(ADDR .. "api/arqs/game/item/" .. go.gameobject, "GET", function(self, id, response)
		if response.status == 200 or response.status == 304 then
			local data = response.response
			local item_data = json.decode(data)

			for i, v in ipairs(item_data) do
				-- pprint(v.IID, v.Name:gsub("%%20", " "), v.Description:gsub("%%20", " "), v.Link, v.Readable, v.Destroyable, v.Content)
				local prototype = "/main/game/quest/prototypes/item/item_prototype.goc"
				
				QUEST_CONTROLLER.addItem(qid, v.IID, v.Name:gsub("%%20", " "), v.Description:gsub("%%20", " "), v.Link, v.Readable, v.Destroyable, v.Content, prototype)
			end
		end
	end)
end

local function set_props(qid, go)
	http.request(ADDR .. "api/arqs/game/prop/" .. go.gameobject, "GET", function(self, id, response)
		if response.status == 200 or response.status == 304 then
			local data = response.response
			local prop_data = json.decode(data)

			for i, v in ipairs(prop_data) do
				-- pprint(v.IID, v.Name:gsub("%%20", " "), v.Description:gsub("%%20", " "), v.Link, v.Readable, v.Destroyable, v.Content)
				local prototype = "/main/game/quest/prototypes/prop/prop_prototype.goc"

				QUEST_CONTROLLER.addProp(qid, v.OID, v.Name:gsub("%%20", " "), v.Description:gsub("%%20", " "), prototype)
			end
		end
	end)
end

local function generate_initiator(quest_id, quest)
	local npcid = quest.initiator_id
	local npcqid = npcid .. quest_id
	local quest_obj = quest.quest_data.tasks[1].gameobjects
	local area, x, y, foreaft = nil
	local room_height = tonumber(AREA_CONTROLLER.roomHeight)

	for i, obj in ipairs(quest_obj) do
		if obj.gameobject == npcid then
			-- print("Before:", obj.x, obj.y, " Room Height:", room_height)
			area = obj.area
			x = obj.x + world_border_offset
			y = room_height - obj.y + world_border_offset - indoor_offset
			foreaft = tonumber(obj.foreaft) * 10
		end
	end

	-- print("Before:", x, y, "Room Height:", room_height, "World Border:", world_border_offset, "indoor_offset", indoor_offset)
	
	if area == AREA_CONTROLLER.currentRoom then
		local npc_list = QUEST_CONTROLLER.npcList
		if npc_list then
			local npc_data = npc_list[npcqid]
			
			factory.unload("#questGo_factory")
			factory.set_prototype("#questGo_factory", npc_data.prototype)
			local id = factory.create("#questGo_factory")
			local sprite_url = msg.url(nil, id, "sprite")
			local pos = vmath.vector3(x * 80, y * 80 + foreaft, 0.8)
			go.set_position(pos, sprite_url)

			QUEST_CONTROLLER.addNPCGO(id,npcid)
		end
	end
end

local function generate_quest_go(quest_id, quest)
	generate_initiator(quest_id, quest)
	local quest_obj = quest.quest_data.tasks[1].gameobjects
	local obj_qid, identifier, area, x, y, foreaft = nil
	local inside_obj_offset = 0
	local z = 0.8
	local room_height = tonumber(AREA_CONTROLLER.roomHeight)

	for i, obj in ipairs(quest_obj) do
		obj_qid = obj.gameobject .. quest_id
		identifier = string.sub(obj.gameobject, 1, 3)
		if identifier == "IID" or identifier == "OID" then
			if obj.inside_object == "true" or identifier == "OID" then
				inside_obj_offset = 2
				z = 0.7
			end
			
			--print("Before:", obj.x, obj.y, " Room Height:", room_height)
			
			area = obj.area
			x = obj.x + world_border_offset
			y = room_height - obj.y + world_border_offset - indoor_offset + inside_obj_offset
			foreaft = tonumber(obj.foreaft) * 10
		end

		--print("After:", x, y, "Room Height:", room_height, "inside:", obj.inside_object, "inside_obj_offset", inside_obj_offset)
		
		if area == AREA_CONTROLLER.currentRoom then
			local obj_data = nil
			if identifier == "IID" then
				obj_data = QUEST_CONTROLLER.itemList[obj_qid]
			else
				obj_data = QUEST_CONTROLLER.propList[obj_qid]
				local prop_object_foreaft = AREA_CONTROLLER.objectList[obj.item_id]["x"].foreaft
				foreaft = tonumber(prop_object_foreaft) * 10
			end

			if obj_data ~= nil then
				factory.unload("#questGo_factory")
				factory.set_prototype("#questGo_factory", obj_data.prototype)
				local id = factory.create("#questGo_factory")
				local sprite_url = msg.url(nil, id, "sprite")
				local pos = vmath.vector3(x * 80, y * 80 + foreaft, z)
				go.set_position(pos, sprite_url)

				if identifier == "IID" then
					QUEST_CONTROLLER.addItemGO(id,obj.gameobject)
				else
					QUEST_CONTROLLER.addPropGO(id,obj.gameobject)
				end
			end
		end	
	end
end

function init(self)
	if next(QUEST_CONTROLLER.questList) == nil then
		http.request(ADDR .. "api/arqs/game/quest/" .. GAME_CONTROLLER.gameId, "GET", function(self, id, response)
			if response.status == 200 or response.status == 304 then
				local json_data = response.response
				local quest_table = json.decode(json_data)
				local quest_data = {}
				local quest_id = ""

				for i, v in ipairs(quest_table) do
					quest_data = json.decode(v.Json)
					quest_id = v.QID
					quest_initiator = quest_data.initiator
					quest_scenario = string.gsub(v.Scenario,"%%20"," ")
					quest_order = v.QOrder
					QUEST_CONTROLLER.addQuest(quest_initiator, quest_id, v.Name, quest_scenario, v.Actions, quest_data, quest_order, false, false)

					-- quest game object handler
					for _, task in ipairs(quest_data.tasks) do
						for _, go in ipairs(task.gameobjects) do
							if string.sub(go.gameobject, 1, 3) == "NPC" then
								set_npc(quest_id, go)
							end
							if string.sub(go.gameobject, 1, 3) == "IID" then
								set_items(quest_id, go)
							end
							if string.sub(go.gameobject, 1, 3) == "OID" then
								set_props(quest_id, go)
							end
						end
					end
				end

-- 				timer.delay(0.1, false, function()
-- 					-- start a quest
-- 					QUEST_CONTROLLER.startQuest("QID12760478231712158675529", true)
-- 					QUEST_CONTROLLER.startQuest("QID11232744861711915217388", true)
-- 					QUEST_CONTROLLER.startQuest("QID78428217681712160240770", true)
-- 
-- 					-- complete a ques
-- 					QUEST_CONTROLLER.completeQuest("QID12760478231712158675529", true)
-- 					QUEST_CONTROLLER.completeQuest("QID11232744861711915217388", true)
-- 					QUEST_CONTROLLER.completeQuest("QID78428217681712160240770", true)
-- 				end)
				
			else
				print("Error: " .. response.status)
			end
		end)
	else
		timer.delay(0.5, false, function()
			local active_qid, active = QUEST_CONTROLLER.getActiveQuest()
			if active_qid and not active.completed then
				--print("Active:",active_qid, active.quest_name, active.quest_order, active.started, active.completed)
				timer.delay(0.5, false, function() generate_quest_go(active_qid, active) end)
			else
				print("There are no active quest.")
				local available_qid, available = QUEST_CONTROLLER.getAvailableQuest()
				if available_qid then
					print("Available:",available_qid, available.quest_name, available.quest_order, available.started, available.completed)
					timer.delay(0.5, false, function() generate_initiator(available_qid, available) end)
				else
					print("There are no more available quest.")
				end
			end
		end)
	end
end


function on_message(self, message_id, message, sender)
	
end
	