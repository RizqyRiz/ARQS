function init(self)
	msg.post("interface", "register")
	msg.post("interface", "register_analog", { id = "analog", radius = 80 })
	msg.post("interface", "register_button", { id = "interact" })

	self.speed = vmath.vector3()
	self.analog_pressed = false
	self.interact_npc = false
	self.interact_item = false
	self.interacting_with = ""
	print(msg.url())
end

function update(self, dt)
	go.set_position(go.get_position() + self.speed * dt)

	if self.speed.x ~= 0 or self.speed.y ~= 0 then
		-- Determine the movement direction
		if self.speed.x < 0 then
			sprite.play_flipbook("#sprite", "walk_left")
		elseif self.speed.x > 0 then
			sprite.play_flipbook("#sprite", "walk_right")
		elseif self.speed.y > 0 then
			sprite.play_flipbook("#sprite", "walk_up")
		elseif self.speed.y < 0 then
			sprite.play_flipbook("#sprite", "walk_down")
		end
	else
		-- Character is idle
		if self.speed.y > 0 then
			sprite.play_flipbook("#sprite", "idle_up")
		elseif self.speed.y < 0 then
			sprite.play_flipbook("#sprite", "idle_down")
		elseif self.speed.x < 0 then
			sprite.play_flipbook("#sprite", "idle_left")
		elseif self.speed.x > 0 then
			sprite.play_flipbook("#sprite", "idle_right")
		end
	end
end


function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.group == hash("obstacle") then
			local normal = message.normal
			local distance = message.distance
			local correction = vmath.vector3()
			if distance > 0 then
				local proj = vmath.project(correction, normal * distance)
				if proj < 1 then
					local comp = (distance - distance * proj) * normal
					go.set_position(go.get_position() + comp)
					correction = correction + comp
				end
			end
		end
	end

	if message_id == hash("onscreen_analog") then
		if message.pressed and not self.analog_pressed then
			self.analog_pressed = true
		elseif message.released then
			self.analog_pressed = false
			self.speed.x = 0
			self.speed.y = 0
		elseif self.analog_pressed then
			self.speed.x = message.x * 250
			self.speed.y = message.y * 250
		end
	end

	if message_id == hash("can_interact_with_npc") then
		--print("Can interact with npc!")
		self.interact_npc = true
		self.interacting_with = sender
		-- print(tostring(sender))
	elseif message_id == hash("cannot_interact_with_npc") then
		--print("Cannot interact with npc!")
		self.interact_npc = false
		self.interacting_with = ""
	end

	if message_id == hash("onscreen_button") and message.id == hash("interact") and message.released and self.interact_npc then
		print("Interacted with npc go id " .. self.interacting_with)
		msg.post(self.interacting_with, "interact_with_player")
	end

	if message_id == hash("can_interact_with_item") then
		--print("Can interact with npc!")
		self.interact_item = true
		self.interacting_with = sender
	elseif message_id == hash("cannot_interact_with_item") then
		--print("Cannot interact with npc!")
		self.interact_item = false
		self.interacting_with = ""
	end

	if message_id == hash("onscreen_button") and message.id == hash("interact") and message.released and self.interact_item then
		print("Interacted with item go id " .. self.interacting_with)
		msg.post(self.interacting_with, "interact_with_player")
	end
end
