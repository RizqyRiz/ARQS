local AREA_CONTROLLER = require("main.module.area_controller")
local GAME_CONTROLLER = require("main.module.game_controller")
local ADDR = GAME_CONTROLLER.address
local PLAYER_CONTROLLER = require("main.module.player_controller")

local function generate_location_go()
	for i, v in pairs(AREA_CONTROLLER.locationData) do
		local loc_name = v.name
		local loc_x = v.x
		local loc_y = 9 - v.y
		local pos = vmath.vector3(loc_x * 80 + 80, loc_y * 80 + 80, 1)

		local id = factory.create("#location_factory", pos)
		local name_url = msg.url(nil, id, "name")
		msg.post(name_url, "set_text", { text = string.gsub(loc_name, "%%20", " ") })
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	-- EA: MID31276066781703927429343
	-- ChemiCo: MID88745638461711914116235
	http.request(ADDR .. "api/arqs/map/" .. GAME_CONTROLLER.gameId, "GET", function(self, id, response)
		if response.status == 200 or response.status == 304 then
			local json_data = response.response
			local data_table = json.decode(json_data)

			local map_name = data_table[1].Name
			--print(map_name)
			GAME_CONTROLLER.setMapName(map_name)

			-- store location starting area
			local locations = data_table[1].Locations
			local loc_str = locations:gsub("[%[%]%\"]", "")
			http.request(ADDR .. "api/arqs/map/location/" .. loc_str, "GET", function(self, id, response)
				if response.status == 200 or response.status == 304 then
					local loc_json = response.response
					local loc_data = json.decode(loc_json)
					local start_loc_data = loc_data[1].Player_Start_Point
					local start_loc = json.decode(start_loc_data)
					local initial_room = start_loc.area
					AREA_CONTROLLER.setCurrentRoom(initial_room)
					
					for i, v in ipairs(loc_data) do
						AREA_CONTROLLER.addLocations(v.LID, v.Name, v.X, v.Y, v.Player_Start_Point)
					end

					PLAYER_CONTROLLER.setLocation(start_loc.x, start_loc.y)

				end
			end)

			-- storing fetched tile data into a table
			local tile_data = data_table[1].Tile_Data
			local rows = {}
			for row in tile_data:gmatch("%b[]") do
				local cols = {}
				for col in row:gmatch("%-?%d+") do
					table.insert(cols, tonumber(col))
				end
				table.insert(rows, cols)
			end

			-- print all non empty tiles
			local row_count = 1
			local col_count = 0
			local max_col = 16
			for i, row in ipairs(rows) do
				for j, col in ipairs(row) do
					-- finding coordinates of each tile
					col_count = col_count + 1
					if col_count > max_col then
						row_count = row_count + 1
						col_count = 1
					end
					local x = col_count
					local y = 11 - row_count
					local pos = vmath.vector3(x * 80, y * 80, 0.5)

					-- set tile for non empty tiles and generate building
					-- Generate Building 2 (4x3 tile, 320x240px collision box)
					if col == 0 then
						local id = factory.create("#factory", pos)
						local sprite_url = msg.url(nil, id, "sprite")
						go.set_position(vmath.vector3(pos.x+80, pos.y+40, 0.5), sprite_url)
						msg.post(sprite_url, "play_animation", {id = hash("Building_2")})
					end
					-- Generate Building 3
					if col == 1 then
						local id = factory.create("#factory", pos)
						local sprite_url = msg.url(nil, id, "sprite")
						go.set_position(vmath.vector3(pos.x, pos.y, 0.5), sprite_url)
						msg.post(sprite_url, "play_animation", {id = hash("Building_3")})
					end
					-- Generate Building 4
					if col == 2 then
						local id = factory.create("#factory", pos)
						local sprite_url = msg.url(nil, id, "sprite")
						go.set_position(vmath.vector3(pos.x, pos.y, 0.5), sprite_url)
						msg.post(sprite_url, "play_animation", {id = hash("Building_4")})
					end
					if col == 3 then
						tilemap.set_tile("/tilemap#arqs_map", "ground", x, y, 74)
					end
					if col == 4 then
						tilemap.set_tile("/tilemap#arqs_map", "ground", x, y, 67)
					end
					if col == 5 then
						tilemap.set_tile("/tilemap#arqs_map", "ground", x, y, 75)
					end
					if col == 6 then
						tilemap.set_tile("/tilemap#arqs_map", "ground", x, y, 68)
					end
					if col == 7 then
						tilemap.set_tile("/tilemap#arqs_map", "ground", x, y, 76)
					end
					if col == 8 then
						tilemap.set_tile("/tilemap#arqs_map", "ground", x, y, 69)
					end
					if col == 9 then
						tilemap.set_tile("/tilemap#arqs_map", "ground", x, y, 77)
					end
					if col == 10 then
						tilemap.set_tile("/tilemap#arqs_map", "ground", x, y, 70)
					end
					if col == 11 then
						tilemap.set_tile("/tilemap#arqs_map", "ground", x, y, 62)
					end
					
					if col == 12 then
						tilemap.set_tile("/tilemap#arqs_map", "ground", x, y, 71)
					end
					if col == 13 then
						tilemap.set_tile("/tilemap#arqs_map", "ground", x, y, 63)
					end
					if col == 14 then
						tilemap.set_tile("/tilemap#arqs_map", "ground", x, y, 66)
					end
					if col == 15 then
						tilemap.set_tile("/tilemap#arqs_map", "ground", x, y, 55)
						tilemap.set_tile("/tilemap#arqs_map", "elevated", x, y + 1, 47)
					end
					-- Generate Building 1
					if col == 17 then
						local id = factory.create("#factory", pos)
						local sprite_url = msg.url(nil, id, "sprite")
						go.set_position(vmath.vector3(pos.x, pos.y+40, 0.5), sprite_url)
						msg.post(sprite_url, "play_animation", {id = hash("Building_1")})
					end
					-- Generate Building 5
					if col == 18 then
						local id = factory.create("#factory", pos)
						local sprite_url = msg.url(nil, id, "sprite")
						go.set_position(vmath.vector3(pos.x+80, pos.y, 0.5), sprite_url)
						msg.post(sprite_url, "play_animation", {id = hash("Building_5")})
					end
					-- Generate Building 6
					if col == 19 then
						local id = factory.create("#factory", pos)
						local sprite_url = msg.url(nil, id, "sprite")
						go.set_position(vmath.vector3(pos.x, pos.y+40, 0.5), sprite_url)
						msg.post(sprite_url, "play_animation", {id = hash("Building_6")})
					end
					-- Generate Building 7
					if col == 20 then
						local id = factory.create("#factory", pos)
						local sprite_url = msg.url(nil, id, "sprite")
						go.set_position(vmath.vector3(pos.x+80, pos.y+40, 0.5), sprite_url)
						msg.post(sprite_url, "play_animation", {id = hash("Building_7")})
					end
					if col == 21 then
						tilemap.set_tile("/tilemap#arqs_map", "elevated", x, y + 1, 65)
						tilemap.set_tile("/tilemap#arqs_map", "ground", x, y, 73)
					end
					-- Generate Outdoor 1
					if col == 22 then
						tilemap.set_tile("/tilemap#arqs_map", "ground", x, y, 39)
						tilemap.set_tile("/tilemap#arqs_map", "ground", x + 1, y, 40)
						tilemap.set_tile("/tilemap#arqs_map", "elevated", x, y + 1, 31)
						tilemap.set_tile("/tilemap#arqs_map", "elevated", x + 1, y + 1, 32)
					end
				end
			end

			if next(AREA_CONTROLLER.locationData) == nil then
				timer.delay(0.25, false, generate_location_go)
				--print("Hello after delay")
			else
				generate_location_go()
				--print("Hello after no delay")
			end
		else
			print("Error: " .. response.status)
		end
	end)
end